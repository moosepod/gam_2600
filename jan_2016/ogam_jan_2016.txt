------- FILE ogam_jan_2016.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE ogam_jan_2016.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE ogam_jan_2016.asm
      4  0000 ????
      5  0000 ????						;;;;; An Atari 2600 game! See http://8bitworkshop.com/
      6  0000 ????
      7  0000 ????						;;;;; Todos!
      8  0000 ????						;;; convert to timers!
      9  0000 ????						;; BUG: when bumping top of screen with sprite whole game "shifts" up
     10  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     11  0000 ????						; Variables segment
     12  0000 ????
     13 U0083 ????				      seg.u	Variables
     14 U0080					      org	$80
     15 U0080
     16 U0080		       00	   Temp       .byte.b
     17 U0081		       00	   Player_X   .byte.b		; X position of ball sprint
     18 U0082		       00	   Player_Y   .byte.b		; Y position of player sprite
     19 U0083
     20 U0083		       00 a2	   PLAYER_MAX_Y equ	#162	; Max Y position for player sprite
     21 U0083		       00 01	   PLAYER_MIN_Y equ	#1	; Min Y position for player sprite
     22 U0083		       00 94	   PLAYER_MAX_X equ	#148	; Max X position for player sprite
     23 U0083		       00 03	   PLAYER_MIN_X equ	#3	; Min X position for player sprite
     24 U0083		       00 09	   PLAYER_START_X equ	#9
     25 U0083		       00 50	   PLAYER_START_Y equ	#80
     26 U0083		       00 ff	   PLAYER_SPRITE equ	#$FF	; Sprite (1 line) for our ball
     27 U0083		       00 60	   PLAYER_COLOR equ	#$60	; Color for ball
     28 U0083		       00 08	   PLAYER_SPRITE_HEIGHT equ	#8	; this is really 1 less than the sprite height
     29 U0083
     30 U0083		       00 0f	   SCOREBOARD_HEIGHT equ	#15
     31 U0083		       00 05	   TOP_BORDER_HEIGHT equ	#5
     32 U0083		       00 51	   BORDER_COLOR equ	#$51	; last bit has to be 1 to do playfield reflection
     33 U0083
     34 U0083							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35 U0083							; Code segment
     36 U0083
     37  10000 ????				       seg	Code
     38  f000					      org	$f000
     39  f000
     40  f000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     41  f000							;;; Setup
     42  f000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f000
     44  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     46  f00b
     47  f00b				   Initialize
     48  f00b		       a9 09		      lda	#PLAYER_START_X
     49  f00d		       85 81		      sta	Player_X
     50  f00f		       a9 50		      lda	#PLAYER_START_Y
     51  f011		       85 82		      sta	Player_Y
     52  f013
     53  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f013							;;; Kernel
     55  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f013
     57  f013				   NextFrame
     58  f013		       4e 82 02 	      lsr	SWCHB	; test Game Reset switch
     59  f016		       90 e8		      bcc	Start	; reset?
     60  f018
     61  f018							; 3 lines of VSYNC
      0  f018					      VERTICAL_SYNC
      1  f018		       a9 0e		      lda	#%1110
      2  f01a		       85 02	   .VSLP1     sta	WSYNC
      3  f01c		       85 00		      sta	VSYNC
      4  f01e		       4a		      lsr
      5  f01f		       d0 f9		      bne	.VSLP1
     63  f021
     64  f021							; 37 lines of underscan total
     65  f021							; Check joysticks
     66  f021		       20 b5 f0 	      jsr	CheckJoystick
     67  f024		       85 02		      sta	WSYNC
     68  f026		       a9 00		      lda	#$00
     69  f028		       85 08		      sta	COLUPF
     70  f02a
     71  f02a		       20 9b f0 	      jsr	PositionPlayerX
     72  f02d		       a6 24		      ldx	36
     73  f02f		       ca	   PreLoop    dex
     74  f030		       85 02		      sta	WSYNC
     75  f032		       d0 fb		      bne	PreLoop
     76  f034
     77  f034							; 192 lines of frame total
     78  f034							;; Setup first lines of playfield
     79  f034		       20 76 f0 	      jsr	DrawScoreboardAndTop
     80  f037
     81  f037							; Loop until we hit the vertical position we want for the ball. Note
     82  f037							; position is offset several lines from the top that act as buffer/scoreboard area
     83  f037
     84  f037		       a6 82		      ldx	Player_Y
     85  f039		       ca	   VLoop      dex
     86  f03a		       85 02		      sta	WSYNC
     87  f03c		       d0 fb		      bne	VLoop
     88  f03e
     89  f03e							; Setup for sprite drawing
     90  f03e		       a0 08		      ldy	#PLAYER_SPRITE_HEIGHT	; sprite data index
     91  f040				   SpriteLoop
     92  f040		       b9 ee f0 	      lda	PLAYER_SPRITE_DATA,y
     93  f043		       85 1b		      sta	GRP0
     94  f045		       b9 f8 f0 	      lda	PLAYER_COLOR_DATA,y
     95  f048		       85 06		      sta	COLUP0
     96  f04a		       85 02		      sta	WSYNC
     97  f04c		       88		      dey
     98  f04d		       d0 f1		      bne	SpriteLoop
     99  f04f
    100  f04f							; Close out the remaining scanlines, which will be 192-sprite height-one line for playfield top)
    101  f04f		       a9 c0		      lda	#192
    102  f051		       e9 08		      sbc	#PLAYER_SPRITE_HEIGHT
    103  f053		       e9 05		      sbc	#TOP_BORDER_HEIGHT
    104  f055		       e9 0f		      sbc	#SCOREBOARD_HEIGHT
    105  f057		       18		      clc
    106  f058		       e5 82		      sbc	Player_Y
    107  f05a		       e5 01	   VWait      sbc	1
    108  f05c		       85 02		      sta	WSYNC
    109  f05e		       d0 fa		      bne	VWait
    110  f060
    111  f060							;; Draw bottom line of playfield
    112  f060		       a9 51		      lda	#BORDER_COLOR
    113  f062		       85 0a		      sta	CTRLPF
    114  f064		       a9 ff		      lda	#$ff
    115  f066		       85 0d		      sta	PF0
    116  f068		       85 0e		      sta	PF1
    117  f06a		       85 0f		      sta	PF2
    118  f06c
    119  f06c							; 30 lines of overscan
    120  f06c		       a6 1e		      ldx	30
    121  f06e				   PostLoop
    122  f06e		       ca		      dex
    123  f06f		       85 02		      sta	WSYNC
    124  f071		       d0 fb		      bne	PostLoop
    125  f073
    126  f073							; go to next frame
    127  f073		       4c 13 f0 	      jmp	NextFrame
    128  f076
    129  f076							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    130  f076							; Subroutines
    131  f076							;;;
    132  f076
    133  f076				   DrawScoreboardAndTop
    134  f076		       a2 0f		      ldx	#SCOREBOARD_HEIGHT
    135  f078				   .Timer
    136  f078		       ca		      dex
    137  f079		       85 02		      sta	WSYNC
    138  f07b		       d0 fb		      bne	.Timer
    139  f07d
    140  f07d							; Draw
    141  f07d		       a9 51		      lda	#BORDER_COLOR
    142  f07f		       85 08		      sta	COLUPF
    143  f081		       a9 ff		      lda	#$ff
    144  f083		       85 0d		      sta	PF0
    145  f085		       85 0e		      sta	PF1
    146  f087		       85 0f		      sta	PF2
    147  f089
    148  f089		       a2 05		      ldx	#TOP_BORDER_HEIGHT
    149  f08b				   .Timer2
    150  f08b		       ca		      dex
    151  f08c		       85 02		      sta	WSYNC
    152  f08e		       d0 fb		      bne	.Timer2
    153  f090
    154  f090							;; draw first line (playfield only) then reset playfield
    155  f090		       a9 10		      lda	#$10
    156  f092		       85 0d		      sta	PF0
    157  f094		       a9 00		      lda	#0
    158  f096		       85 0e		      sta	PF1
    159  f098		       85 0f		      sta	PF2
    160  f09a
    161  f09a		       60		      rts
    162  f09b
    163  f09b							; Handle the (very timing dependent) adjustment of X position for the player
    164  f09b				   PositionPlayerX
    165  f09b		       a5 81		      lda	Player_X
    166  f09d		       38		      sec
    167  f09e		       85 02		      sta	WSYNC
    168  f0a0		       85 2b		      sta	HMCLR	; Clear old horizontal pos
    169  f0a2
    170  f0a2							; Divide the X position by 15, the # of TIA color clocks per loop
    171  f0a2				   DivideLoop
    172  f0a2		       e9 0f		      sbc	#15
    173  f0a4		       b0 fc		      bcs	DivideLoop
    174  f0a6
    175  f0a6							; A will contain remainder of division. Convert to fine adjust
    176  f0a6							; which is -7 to +8
    177  f0a6		       49 07		      eor	#7	; calcs (23-A) % 16
    178  f0a8		       0a		      asl
    179  f0a9		       0a		      asl
    180  f0aa		       0a		      asl
    181  f0ab		       0a		      asl
    182  f0ac		       85 20		      sta	HMP0	; set the fine position
    183  f0ae
    184  f0ae		       85 10		      sta	RESP0	; set the coarse position
    185  f0b0		       85 02		      sta	WSYNC
    186  f0b2		       85 2a		      sta	HMOVE	; set the fine positioning
    187  f0b4
    188  f0b4		       60		      rts
    189  f0b5
    190  f0b5							; This subroutine checks the player one joystick and moves the player accordingly
    191  f0b5				   CheckJoystick
    192  f0b5		       a6 81		      ldx	Player_X
    193  f0b7		       ad 80 02 	      lda	SWCHA
    194  f0ba		       29 80		      and	#$80	; 1000000
    195  f0bc		       f0 05		      beq	.SkipMoveRight	; checks bit 7 set
    196  f0be		       e0 03		      cpx	#PLAYER_MIN_X	; Check bounds
    197  f0c0		       f0 0d		      beq	.SkipMoveLeft
    198  f0c2		       ca		      dex
    199  f0c3				   .SkipMoveRight
    200  f0c3		       ad 80 02 	      lda	SWCHA
    201  f0c6		       29 40		      and	#$40	; 0100000
    202  f0c8		       f0 05		      beq	.SkipMoveLeft	; checks bit 6 set
    203  f0ca		       e0 94		      cpx	#PLAYER_MAX_X	; Check bounds
    204  f0cc		       f0 01		      beq	.SkipMoveLeft
    205  f0ce		       e8		      inx
    206  f0cf				   .SkipMoveLeft
    207  f0cf		       86 81		      stx	Player_X
    208  f0d1
    209  f0d1							; Now we repeat the process but with a SWCHA that is shifted left twice, so down is
    210  f0d1							; bit 7 and up is bit 6
    211  f0d1		       a6 82		      ldx	Player_Y
    212  f0d3		       ad 80 02 	      lda	SWCHA
    213  f0d6		       29 20		      and	#$20	; 00100000
    214  f0d8		       f0 05		      beq	.SkipMoveDown	; checks bit 5 set
    215  f0da		       e0 01		      cpx	#PLAYER_MIN_Y	; Check bounds
    216  f0dc		       f0 0d		      beq	.SkipMoveUp
    217  f0de		       ca		      dex
    218  f0df				   .SkipMoveDown
    219  f0df		       ad 80 02 	      lda	SWCHA
    220  f0e2		       29 10		      and	#$10	; 00010000
    221  f0e4		       f0 05		      beq	.SkipMoveUp	; checks bit 4 set
    222  f0e6		       e0 a2		      cpx	#PLAYER_MAX_Y	; Check bounds
    223  f0e8		       f0 01		      beq	.SkipMoveUp
    224  f0ea		       e8		      inx
    225  f0eb				   .SkipMoveUp
    226  f0eb		       86 82		      stx	Player_Y
    227  f0ed
    228  f0ed		       60		      rts
    229  f0ee
    230  f0ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    231  f0ee							; Sprite data
    232  f0ee							;---Graphics Data from PlayerPal 2600---
    233  f0ee
    234  f0ee				   PLAYER_SPRITE_DATA
    235  f0ee		       00		      .byte.b	#%00000000	;--
    236  f0ef		       00		      .byte.b	#%00000000	;--
    237  f0f0		       14		      .byte.b	#%00010100	;$84
    238  f0f1		       3e		      .byte.b	#%00111110	;$84
    239  f0f2		       00		      .byte.b	#%00000000	;$F6
    240  f0f3		       00		      .byte.b	#%00000000	;$F6
    241  f0f4		       08		      .byte.b	#%00001000	;$F6
    242  f0f5		       00		      .byte.b	#%00000000	;$20
    243  f0f6		       22		      .byte.b	#%00100010	;$20
    244  f0f7		       00		      .byte.b	#%00000000	;--
    245  f0f8							;---End Graphics Data---
    246  f0f8
    247  f0f8
    248  f0f8							;---Color Data from PlayerPal 2600---
    249  f0f8
    250  f0f8				   PLAYER_COLOR_DATA
    251  f0f8		       54		      .byte.b	#$54	;
    252  f0f9		       84		      .byte.b	#$84	;
    253  f0fa		       06		      .byte.b	#$06	;
    254  f0fb		       06		      .byte.b	#$06	;
    255  f0fc		       06		      .byte.b	#$06	;
    256  f0fd		       fe		      .byte.b	#$FE	;
    257  f0fe		       fe		      .byte.b	#$FE	;
    258  f0ff		       0e		      .byte.b	#$0E	;
    259  f100		       0e		      .byte.b	#$0E	;
    260  f101							;---End Color Data---
    261  f101							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    262  f101							; Epilogue
    263  f101
    264  fffc					      org	$fffc
    265  fffc		       00 f0		      .word.w	Start	; reset vector
    266  fffe		       00 f0		      .word.w	Start	; BRK vector
